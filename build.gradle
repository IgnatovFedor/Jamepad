buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies {
        classpath "com.badlogicgames.gdx:gdx-jnigen-gradle:2.0.0-SNAPSHOT"
    }
}

apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "com.badlogicgames.gdx.gdx-jnigen"

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets.main.resources.srcDirs = [ "res/",
                                      "libs/linux32", "libs/linux64",
                                      "libs/macosx32", "libs/macosx64",
                                      "libs/windows32", "libs/windows64",
                                      "libs/linuxarm32", "libs/linuxarm64"]

repositories {
    mavenLocal()
    mavenCentral()
}

ext {
    gdxVersion = '1.9.11'
}

group = 'com.github.WilliamAHartman'
version = '2.0.0'

ext.getSdl2CFlags = { workingDir ->
	try {
		String executable = 'sdl2-config2';
		if(workingDir != null) {
			executable = workingDir + executable;
			if(!file(executable).exists()) {
				return "";
			}
	    }
	
	    def output = new ByteArrayOutputStream()
	    project.exec {
	        commandLine executable, '--cflags'
	        standardOutput = output
	        ignoreExitValue true
	    }
	    return output.toString().trim();
	} catch(Exception e) {
		return "";
	}
}
ext.getSdl2StaticLibs = { workingDir ->
	try {
		String executable = 'sdl2-config';
		if(workingDir != null) {
			executable = workingDir + executable;
			if(!file(executable).exists()) {
				return "";
			}
	    }
	
	    def output = new ByteArrayOutputStream()
	    project.exec {
	        commandLine executable, '--static-libs'
	        standardOutput = output
	        ignoreExitValue true
	    }
	    return output.toString().trim();
	} catch(Exception e) {
		return "";
	}
}

jnigen {
    sharedLibName = "jamepad"
    all {
        headerDirs = ["../SDL/include"]
        cFlags += " -fvisibility=hidden "
        cppFlags += " -std=c++11 -fvisibility=hidden "
        linkerFlags += " -fvisibility=hidden -fdata-sections -ffunction-sections "
    }
    add(Windows, x32) {
        cFlags += getSdl2CFlags('./SDL/build-windows32/')
        cppFlags += getSdl2CFlags('./SDL/build-windows32/')
        libraries += getSdl2StaticLibs('./SDL/build-windows32/').replace("-lSDL2main", file("SDL/build-windows32/build/.libs/libSDL2main.a").absolutePath).replace("-lSDL2", file("SDL/build-windows32/build/.libs/libSDL2.a").absolutePath)
    }
    add(Windows, x64) {
        cFlags += getSdl2CFlags('./SDL/build-windows64/')
        cppFlags += getSdl2CFlags('./SDL/build-windows64/')
        libraries += getSdl2StaticLibs('./SDL/build-windows64/').replace("-lSDL2main", file("SDL/build-windows64/build/.libs/libSDL2main.a").absolutePath).replace("-lSDL2", file("SDL/build-windows64/build/.libs/libSDL2.a").absolutePath)
    }
    add(Linux, x32) {
        cFlags += getSdl2CFlags('./SDL/build-linux32/')
        cppFlags += getSdl2CFlags('./SDL/build-linux32/')
        libraries += getSdl2StaticLibs('./SDL/build-linux32/').replace("-lSDL2", file("SDL/build-linux32/build/.libs/libSDL2.a").absolutePath)
    }
    add(Linux, x64) {
        cFlags += getSdl2CFlags('./SDL/build-linux64/')
        cppFlags += getSdl2CFlags('./SDL/build-linux64/')
        libraries += getSdl2StaticLibs('./SDL/build-linux64/').replace("-lSDL2", file("SDL/build-linux64/build/.libs/libSDL2.a").absolutePath)
    }
    add(Linux, x32, ARM) {
        cFlags += getSdl2CFlags('./SDL/build-linuxarm32/')
        cppFlags += getSdl2CFlags('./SDL/build-linuxarm32/')
        libraries += getSdl2StaticLibs('./SDL/build-linuxarm32/').replace("-lSDL2", file("SDL/build-linuxarm32/build/.libs/libSDL2.a").absolutePath)
    }
    add(Linux, x64, ARM) {
        cFlags += getSdl2CFlags('./SDL/build-linuxarm64/')
        cppFlags += getSdl2CFlags('./SDL/build-linuxarm64/')
        libraries += getSdl2StaticLibs('./SDL/build-linuxarm64/').replace("-lSDL2", file("SDL/build-linuxarm64/build/.libs/libSDL2.a").absolutePath)
    }
    add(MacOsX, x64) {
        cFlags += getSdl2CFlags('./SDL/build-macos64/')
        cppFlags += getSdl2CFlags('./SDL/build-macos64/')
        libraries += "/usr/local/lib/libSDL2.a -lm -liconv -Wl,-framework,CoreAudio -Wl,-framework,AudioToolbox -Wl,-framework,ForceFeedback -lobjc -Wl,-framework,CoreVideo -Wl,-framework,Cocoa -Wl,-framework,Carbon -Wl,-framework,IOKit -Wl,-weak_framework,QuartzCore -Wl,-weak_framework,Metal"
    }
}

dependencies {
    testImplementation "com.badlogicgames.gdx:gdx:$gdxVersion"
    testImplementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
}

apply from: 'publish.gradle'